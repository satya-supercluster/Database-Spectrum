-- Problem 74: Real-time Anomaly Detection in Sales Patterns
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to detect anomalies in sales patterns using statistical methods and alert on unusual trends.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH DailySalesData AS (SELECT DATE(s.orderDate) AS saleDate, COUNT(s.orderId) AS dailyOrderCount, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS dailyRevenue, COUNT(DISTINCT s.custId) AS dailyUniqueCustomers, AVG(od.quantity * od.unitPrice * (1 - od.discount)) AS dailyAvgOrderValue FROM SalesOrder s JOIN OrderDetail od ON s.orderId = od.orderId WHERE s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 180 DAY) GROUP BY DATE(s.orderDate)), StatisticalBaseline AS (SELECT AVG(dailyRevenue) AS avgDailyRevenue, STDDEV(dailyRevenue) AS stdDailyRevenue, AVG(dailyOrderCount) AS avgDailyOrders, STDDEV(dailyOrderCount) AS stdDailyOrders, AVG(dailyAvgOrderValue) AS avgOrderValue, STDDEV(dailyAvgOrderValue) AS stdOrderValue FROM DailySalesData), AnomalyDetection AS (SELECT dsd.saleDate, dsd.dailyRevenue, dsd.dailyOrderCount, dsd.dailyAvgOrderValue, sb.avgDailyRevenue, sb.stdDailyRevenue, sb.avgDailyOrders, sb.stdDailyOrders, (dsd.dailyRevenue - sb.avgDailyRevenue) / NULLIF(sb.stdDailyRevenue, 0) AS revenueZScore, (dsd.dailyOrderCount - sb.avgDailyOrders) / NULLIF(sb.stdDailyOrders, 0) AS orderCountZScore, (dsd.dailyAvgOrderValue - sb.avgOrderValue) / NULLIF(sb.stdOrderValue, 0) AS orderValueZScore FROM DailySalesData dsd CROSS JOIN StatisticalBaseline sb), AnomalyClassification AS (SELECT saleDate, dailyRevenue, dailyOrderCount, dailyAvgOrderValue, revenueZScore, orderCountZScore, orderValueZScore, CASE WHEN ABS(revenueZScore) > 2.5 OR ABS(orderCountZScore) > 2.5 OR ABS(orderValueZScore) > 2.5 THEN 'High Anomaly' WHEN ABS(revenueZScore) > 2.0 OR ABS(orderCountZScore) > 2.0 OR ABS(orderValueZScore) > 2.0 THEN 'Medium Anomaly' WHEN ABS(revenueZScore) > 1.5 OR ABS(orderCountZScore) > 1.5 OR ABS(orderValueZScore) > 1.5 THEN 'Low Anomaly' ELSE 'Normal' END AS anomalyLevel, CASE WHEN revenueZScore > 2.0 THEN 'Unusually High Revenue' WHEN revenueZScore < -2.0 THEN 'Unusually Low Revenue' WHEN orderCountZScore > 2.0 THEN 'Unusually High Order Volume' WHEN orderCountZScore < -2.0 THEN 'Unusually Low Order Volume' WHEN orderValueZScore > 2.0 THEN 'Unusually High Order Values' WHEN orderValueZScore < -2.0 THEN 'Unusually Low Order Values' ELSE 'Normal Pattern' END AS anomalyDescription FROM AnomalyDetection), RecentAnomalies AS (SELECT saleDate, anomalyLevel, anomalyDescription, dailyRevenue, revenueZScore FROM AnomalyClassification WHERE saleDate >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND anomalyLevel != 'Normal') SELECT anomalyLevel, COUNT(*) AS anomalyCount, AVG(ABS(revenueZScore)) AS avgZScore, GROUP_CONCAT(DISTINCT anomalyDescription) AS alertTypes FROM RecentAnomalies GROUP BY anomalyLevel ORDER BY FIELD(anomalyLevel, 'High Anomaly', 'Medium Anomaly', 'Low Anomaly');
