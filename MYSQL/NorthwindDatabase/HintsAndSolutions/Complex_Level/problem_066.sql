-- Problem 66: Multi-Level Marketing Attribution Model
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to implement a sophisticated attribution model that tracks customer acquisition and assigns credit across multiple touchpoints.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH CustomerFirstOrder AS (SELECT c.custId, MIN(s.orderDate) AS firstOrderDate, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS firstOrderValue FROM Customer c JOIN SalesOrder s ON c.custId = s.custId JOIN OrderDetail od ON s.orderId = od.orderId GROUP BY c.custId), CustomerLifetimeValue AS (SELECT c.custId, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS totalLTV, COUNT(DISTINCT s.orderId) AS totalOrders FROM Customer c JOIN SalesOrder s ON c.custId = s.custId JOIN OrderDetail od ON s.orderId = od.orderId GROUP BY c.custId), EmployeeAttribution AS (SELECT e.employeeId, CONCAT(e.firstname, ' ', e.lastname) AS employeeName, COUNT(DISTINCT cfo.custId) AS customersAcquired, SUM(clv.totalLTV) AS totalAttributedRevenue, AVG(clv.totalLTV) AS avgCustomerValue FROM Employee e JOIN SalesOrder s ON e.employeeId = s.employeeId JOIN CustomerFirstOrder cfo ON s.custId = cfo.custId AND s.orderDate = cfo.firstOrderDate JOIN CustomerLifetimeValue clv ON cfo.custId = clv.custId GROUP BY e.employeeId, e.firstname, e.lastname), TerritoryAttribution AS (SELECT t.territoryId, t.territorydescription, r.regiondescription, COUNT(DISTINCT ea.employeeId) AS employeeCount, SUM(ea.customersAcquired) AS territoryCustomers, SUM(ea.totalAttributedRevenue) AS territoryRevenue FROM Territory t JOIN Region r ON t.regionId = r.regionId JOIN EmployeeTerritory et ON t.territoryId = et.territoryId JOIN EmployeeAttribution ea ON et.employeeId = ea.employeeId GROUP BY t.territoryId, t.territorydescription, r.regiondescription), AttributionHierarchy AS (SELECT ta.regiondescription, ta.territoryId, ta.territorydescription, ta.employeeCount, ta.territoryCustomers, ta.territoryRevenue, ta.territoryRevenue / SUM(ta.territoryRevenue) OVER (PARTITION BY ta.regiondescription) * 100 AS regionContribution FROM TerritoryAttribution ta) SELECT regiondescription, COUNT(territoryId) AS territories, SUM(employeeCount) AS totalEmployees, SUM(territoryCustomers) AS regionCustomers, SUM(territoryRevenue) AS regionRevenue, AVG(regionContribution) AS avgTerritoryContribution FROM AttributionHierarchy GROUP BY regiondescription ORDER BY regionRevenue DESC;
