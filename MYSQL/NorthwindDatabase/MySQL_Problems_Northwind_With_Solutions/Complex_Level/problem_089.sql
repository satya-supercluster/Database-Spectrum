-- Problem 89: Real-time Business Performance Dashboard
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to create a comprehensive real-time dashboard with key performance indicators and alerts.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH RealTimeMetrics AS (SELECT COUNT(DISTINCT s.orderId) AS orders_today, COUNT(DISTINCT s.custId) AS active_customers_today, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS revenue_today, AVG(od.quantity * od.unitPrice * (1 - od.discount)) AS avg_order_value_today FROM SalesOrder s JOIN OrderDetail od ON s.orderId = od.orderId WHERE DATE(s.orderDate) = CURDATE()), HistoricalComparison AS (SELECT AVG(daily_orders) AS avg_daily_orders, AVG(daily_revenue) AS avg_daily_revenue, STDDEV(daily_orders) AS stddev_daily_orders, STDDEV(daily_revenue) AS stddev_daily_revenue FROM (SELECT DATE(s.orderDate) AS order_date, COUNT(s.orderId) AS daily_orders, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS daily_revenue FROM SalesOrder s JOIN OrderDetail od ON s.orderId = od.orderId WHERE s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND DATE(s.orderDate) < CURDATE() GROUP BY DATE(s.orderDate)) AS daily_stats), PerformanceAlerts AS (SELECT rtm.orders_today, rtm.revenue_today, hc.avg_daily_orders, hc.avg_daily_revenue, hc.stddev_daily_orders, hc.stddev_daily_revenue, CASE WHEN rtm.orders_today < (hc.avg_daily_orders - 2 * hc.stddev_daily_orders) THEN 'Low Order Volume Alert' WHEN rtm.orders_today > (hc.avg_daily_orders + 2 * hc.stddev_daily_orders) THEN 'High Order Volume Alert' ELSE 'Normal Order Volume' END AS order_alert, CASE WHEN rtm.revenue_today < (hc.avg_daily_revenue - 2 * hc.stddev_daily_revenue) THEN 'Low Revenue Alert' WHEN rtm.revenue_today > (hc.avg_daily_revenue + 2 * hc.stddev_daily_revenue) THEN 'High Revenue Alert' ELSE 'Normal Revenue' END AS revenue_alert FROM RealTimeMetrics rtm CROSS JOIN HistoricalComparison hc), InventoryAlerts AS (SELECT COUNT(*) AS low_stock_products FROM Product WHERE unitsInStock <= reorderLevel AND discontinued = '0'), CustomerAlerts AS (SELECT COUNT(*) AS at_risk_customers FROM (SELECT c.custId FROM Customer c JOIN SalesOrder s ON c.custId = s.custId GROUP BY c.custId HAVING MAX(s.orderDate) < DATE_SUB(CURDATE(), INTERVAL 90 DAY)) AS at_risk), DashboardSummary AS (SELECT 'Performance' AS metric_category, CONCAT('Orders: ', pa.orders_today, ' (', pa.order_alert, '), Revenue: , FORMAT(pa.revenue_today, 2), ' (', pa.revenue_alert, ')') AS metric_value FROM PerformanceAlerts pa UNION ALL SELECT 'Inventory', CONCAT('Low Stock Products: ', ia.low_stock_products) FROM InventoryAlerts ia UNION ALL SELECT 'Customer Risk', CONCAT('At Risk Customers: ', ca.at_risk_customers) FROM CustomerAlerts ca) SELECT metric_category, metric_value FROM DashboardSummary;
