-- Problem 70: Dynamic Revenue Optimization with Real-time Adjustments
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to implement dynamic pricing and revenue optimization based on real-time demand patterns and competitive positioning.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH RealTimeDemand AS (SELECT p.productId, p.productName, p.unitPrice AS currentPrice, SUM(CASE WHEN s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN od.quantity ELSE 0 END) AS recent30DayDemand, SUM(CASE WHEN s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN od.quantity ELSE 0 END) AS recent7DayDemand, AVG(od.unitPrice) AS avgSoldPrice, COUNT(DISTINCT s.custId) AS uniqueCustomers FROM Product p LEFT JOIN OrderDetail od ON p.productId = od.productId LEFT JOIN SalesOrder s ON od.orderId = s.orderId GROUP BY p.productId, p.productName, p.unitPrice), DemandTrend AS (SELECT productId, productName, currentPrice, recent30DayDemand, recent7DayDemand, avgSoldPrice, uniqueCustomers, CASE WHEN recent7DayDemand > (recent30DayDemand / 4) THEN 'Increasing' WHEN recent7DayDemand < (recent30DayDemand / 6) THEN 'Decreasing' ELSE 'Stable' END AS demandTrend FROM RealTimeDemand), CompetitivePosition AS (SELECT dt.productId, dt.productName, dt.currentPrice, dt.demandTrend, c.categoryName, AVG(p2.unitPrice) AS categoryAvgPrice, CASE WHEN dt.currentPrice > AVG(p2.unitPrice) * 1.2 THEN 'Premium' WHEN dt.currentPrice < AVG(p2.unitPrice) * 0.8 THEN 'Budget' ELSE 'Competitive' END AS pricePosition FROM DemandTrend dt JOIN Product p ON dt.productId = p.productId JOIN Category c ON p.categoryId = c.categoryId JOIN Product p2 ON c.categoryId = p2.categoryId GROUP BY dt.productId, dt.productName, dt.currentPrice, dt.demandTrend, c.categoryName), OptimizationStrategy AS (SELECT productId, productName, currentPrice, demandTrend, pricePosition, categoryAvgPrice, CASE WHEN demandTrend = 'Increasing' AND pricePosition = 'Budget' THEN currentPrice * 1.15 WHEN demandTrend = 'Increasing' AND pricePosition = 'Competitive' THEN currentPrice * 1.08 WHEN demandTrend = 'Decreasing' AND pricePosition = 'Premium' THEN currentPrice * 0.92 WHEN demandTrend = 'Decreasing' THEN currentPrice * 0.95 ELSE currentPrice END AS optimizedPrice FROM CompetitivePosition) SELECT demandTrend, pricePosition, COUNT(*) AS productCount, AVG(currentPrice) AS avgCurrentPrice, AVG(optimizedPrice) AS avgOptimizedPrice, AVG((optimizedPrice - currentPrice) / currentPrice * 100) AS avgPriceChange FROM OptimizationStrategy GROUP BY demandTrend, pricePosition ORDER BY demandTrend, pricePosition;
