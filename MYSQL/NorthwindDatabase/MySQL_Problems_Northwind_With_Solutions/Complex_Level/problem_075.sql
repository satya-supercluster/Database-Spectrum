-- Problem 75: Integrated Supply Chain and Demand Planning Optimization
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query for comprehensive supply chain optimization integrating demand forecasting, inventory planning, and supplier performance.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH DemandForecast AS (SELECT p.productId, p.productName, SUM(CASE WHEN s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 90 DAY) THEN od.quantity ELSE 0 END) / 3 AS avgMonthlyDemand, SUM(CASE WHEN s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN od.quantity ELSE 0 END) AS last30DayDemand, STDDEV(CASE WHEN s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 90 DAY) THEN od.quantity END) AS demandVariability FROM Product p LEFT JOIN OrderDetail od ON p.productId = od.productId LEFT JOIN SalesOrder s ON od.orderId = s.orderId GROUP BY p.productId, p.productName), InventoryAnalysis AS (SELECT df.productId, df.productName, df.avgMonthlyDemand, df.demandVariability, p.unitsInStock, p.reorderLevel, p.unitPrice, CASE WHEN df.avgMonthlyDemand > 0 THEN p.unitsInStock / df.avgMonthlyDemand ELSE NULL END AS monthsOfInventory, CASE WHEN df.avgMonthlyDemand > 0 AND p.unitsInStock <= df.avgMonthlyDemand * 0.5 THEN 'Critical' WHEN df.avgMonthlyDemand > 0 AND p.unitsInStock <= df.avgMonthlyDemand THEN 'Low' WHEN p.unitsInStock > df.avgMonthlyDemand * 4 THEN 'Excess' ELSE 'Normal' END AS inventoryStatus FROM DemandForecast df JOIN Product p ON df.productId = p.productId), SupplierPerformance AS (SELECT s.supplierId, s.companyName AS supplierName, s.country, COUNT(p.productId) AS productsSupplied, AVG(ia.avgMonthlyDemand) AS avgSupplierDemand, SUM(ia.unitsInStock * p.unitPrice) AS supplierInventoryValue, COUNT(CASE WHEN ia.inventoryStatus = 'Critical' THEN 1 END) AS criticalProducts FROM Supplier s JOIN Product p ON s.supplierId = p.supplierId JOIN InventoryAnalysis ia ON p.productId = ia.productId GROUP BY s.supplierId, s.companyName, s.country), OptimizationRecommendations AS (SELECT ia.productId, ia.productName, ia.inventoryStatus, ia.monthsOfInventory, sp.supplierName, sp.country AS supplierCountry, CASE WHEN ia.inventoryStatus = 'Critical' THEN CEIL(ia.avgMonthlyDemand * 3 + ia.demandVariability * 1.65) WHEN ia.inventoryStatus = 'Low' THEN CEIL(ia.avgMonthlyDemand * 2) WHEN ia.inventoryStatus = 'Excess' THEN FLOOR(ia.avgMonthlyDemand * 1.5) ELSE ia.reorderLevel END AS recommendedReorderLevel, CASE WHEN ia.inventoryStatus = 'Critical' THEN 'Emergency Purchase Order' WHEN ia.inventoryStatus = 'Low' THEN 'Planned Reorder' WHEN ia.inventoryStatus = 'Excess' THEN 'Reduce Future Orders' ELSE 'Maintain Current Level' END AS action FROM InventoryAnalysis ia JOIN Product p ON ia.productId = p.productId JOIN SupplierPerformance sp ON p.supplierId = sp.supplierId), SupplyChainSummary AS (SELECT sp.supplierName, sp.country, sp.productsSupplied, sp.criticalProducts, sp.supplierInventoryValue, COUNT(or.productId) AS totalRecommendations, SUM(CASE WHEN or.action = 'Emergency Purchase Order' THEN 1 ELSE 0 END) AS urgentActions FROM SupplierPerformance sp LEFT JOIN Product p ON sp.supplierId = p.supplierId LEFT JOIN OptimizationRecommendations or ON p.productId = or.productId GROUP BY sp.supplierId, sp.supplierName, sp.country, sp.productsSupplied, sp.criticalProducts, sp.supplierInventoryValue) SELECT supplierName, country, productsSupplied, criticalProducts, FORMAT(supplierInventoryValue, 2) AS inventoryValue, totalRecommendations, urgentActions, CASE WHEN criticalProducts > productsSupplied * 0.5 THEN 'High Risk Supplier' WHEN urgentActions > 0 THEN 'Action Required' ELSE 'Stable' END AS supplierStatus FROM SupplyChainSummary ORDER BY urgentActions DESC, criticalProducts DESC;
