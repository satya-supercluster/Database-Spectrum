-- Problem 73: Comprehensive Business Intelligence Dashboard Query
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to create a comprehensive BI dashboard with KPIs, trends, and actionable insights across all business dimensions.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH SalesMetrics AS (SELECT COUNT(DISTINCT s.orderId) AS totalOrders, COUNT(DISTINCT s.custId) AS activeCustomers, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS totalRevenue, AVG(od.quantity * od.unitPrice * (1 - od.discount)) AS avgOrderValue, SUM(od.quantity) AS totalUnitsSold FROM SalesOrder s JOIN OrderDetail od ON s.orderId = od.orderId WHERE s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)), ProductMetrics AS (SELECT COUNT(*) AS totalProducts, COUNT(CASE WHEN unitsInStock > 0 THEN 1 END) AS inStockProducts, COUNT(CASE WHEN discontinued = '1' THEN 1 END) AS discontinuedProducts, AVG(unitPrice) AS avgProductPrice FROM Product), CustomerMetrics AS (SELECT COUNT(*) AS totalCustomers, COUNT(DISTINCT country) AS countriesServed, AVG(orderCount) AS avgOrdersPerCustomer FROM (SELECT c.custId, COUNT(s.orderId) AS orderCount FROM Customer c LEFT JOIN SalesOrder s ON c.custId = s.custId GROUP BY c.custId) AS customerOrders), MonthlyTrends AS (SELECT DATE_FORMAT(s.orderDate, '%Y-%m') AS month, COUNT(s.orderId) AS monthlyOrders, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS monthlyRevenue, COUNT(DISTINCT s.custId) AS monthlyActiveCustomers FROM SalesOrder s JOIN OrderDetail od ON s.orderId = od.orderId WHERE s.orderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY DATE_FORMAT(s.orderDate, '%Y-%m')), CategoryPerformance AS (SELECT c.categoryName, COUNT(p.productId) AS productCount, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS categoryRevenue, AVG(p.unitPrice) AS avgCategoryPrice, RANK() OVER (ORDER BY SUM(od.quantity * od.unitPrice * (1 - od.discount)) DESC) AS revenueRank FROM Category c JOIN Product p ON c.categoryId = p.categoryId LEFT JOIN OrderDetail od ON p.productId = od.productId GROUP BY c.categoryId, c.categoryName), TopCustomers AS (SELECT c.companyName, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS customerRevenue, COUNT(s.orderId) AS customerOrders, RANK() OVER (ORDER BY SUM(od.quantity * od.unitPrice * (1 - od.discount)) DESC) AS customerRank FROM Customer c JOIN SalesOrder s ON c.custId = s.custId JOIN OrderDetail od ON s.orderId = od.orderId GROUP BY c.custId, c.companyName LIMIT 10), EmployeePerformance AS (SELECT CONCAT(e.firstname, ' ', e.lastname) AS employeeName, COUNT(s.orderId) AS ordersHandled, SUM(od.quantity * od.unitPrice * (1 - od.discount)) AS employeeRevenue, RANK() OVER (ORDER BY SUM(od.quantity * od.unitPrice * (1 - od.discount)) DESC) AS performanceRank FROM Employee e LEFT JOIN SalesOrder s ON e.employeeId = s.employeeId LEFT JOIN OrderDetail od ON s.orderId = od.orderId GROUP BY e.employeeId, e.firstname, e.lastname), BusinessSummary AS (SELECT 'Sales Overview' AS section, CONCAT('Total Orders: ', sm.totalOrders, ', Revenue: , FORMAT(sm.totalRevenue, 2), ', AOV: , FORMAT(sm.avgOrderValue, 2)) AS summary FROM SalesMetrics sm UNION ALL SELECT 'Product Portfolio', CONCAT('Total Products: ', pm.totalProducts, ', In Stock: ', pm.inStockProducts, ', Avg Price: , FORMAT(pm.avgProductPrice, 2)) FROM ProductMetrics pm UNION ALL SELECT 'Customer Base', CONCAT('Total Customers: ', cm.totalCustomers, ', Countries: ', cm.countriesServed, ', Avg Orders: ', FORMAT(cm.avgOrdersPerCustomer, 1)) FROM CustomerMetrics cm) SELECT section, summary FROM BusinessSummary;
