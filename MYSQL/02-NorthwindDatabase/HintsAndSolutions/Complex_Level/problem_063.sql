-- Problem 63: Advanced Inventory Optimization with Demand Forecasting
-- Level: Complex
-- ============================================================

-- PROBLEM STATEMENT:
-- Write a query to optimize inventory levels using demand forecasting, seasonality analysis, and safety stock calculations.

-- ============================================================
-- SOLUTION:
-- ============================================================

WITH MonthlyDemand AS (SELECT p.productId, p.productName, DATE_FORMAT(s.orderDate, '%Y-%m') AS month, SUM(od.quantity) AS monthlyQuantity FROM Product p JOIN OrderDetail od ON p.productId = od.productId JOIN SalesOrder s ON od.orderId = s.orderId GROUP BY p.productId, p.productName, DATE_FORMAT(s.orderDate, '%Y-%m')), DemandStats AS (SELECT productId, productName, AVG(monthlyQuantity) AS avgMonthlyDemand, STDDEV(monthlyQuantity) AS demandStdDev, MAX(monthlyQuantity) AS maxMonthlyDemand, MIN(monthlyQuantity) AS minMonthlyDemand, COUNT(*) AS monthsWithSales FROM MonthlyDemand GROUP BY productId, productName), SeasonalityFactors AS (SELECT md.productId, MONTH(STR_TO_DATE(md.month, '%Y-%m')) AS monthNum, AVG(md.monthlyQuantity) AS avgForMonth, ds.avgMonthlyDemand, (AVG(md.monthlyQuantity) / ds.avgMonthlyDemand) AS seasonalityFactor FROM MonthlyDemand md JOIN DemandStats ds ON md.productId = ds.productId GROUP BY md.productId, MONTH(STR_TO_DATE(md.month, '%Y-%m')), ds.avgMonthlyDemand), InventoryOptimization AS (SELECT p.productId, p.productName, p.unitsInStock AS currentStock, ds.avgMonthlyDemand, ds.demandStdDev, p.reorderLevel AS currentReorderLevel, CEIL(ds.avgMonthlyDemand * 1.5) AS recommendedReorderLevel, CEIL(ds.avgMonthlyDemand * 3 + ds.demandStdDev * 1.65) AS recommendedMaxStock, sf.seasonalityFactor AS currentSeasonFactor, CASE WHEN p.unitsInStock < ds.avgMonthlyDemand * 0.5 THEN 'Urgent Reorder' WHEN p.unitsInStock < ds.avgMonthlyDemand THEN 'Reorder Soon' WHEN p.unitsInStock > ds.avgMonthlyDemand * 4 THEN 'Overstocked' ELSE 'Optimal' END AS stockStatus FROM Product p JOIN DemandStats ds ON p.productId = ds.productId LEFT JOIN SeasonalityFactors sf ON p.productId = sf.productId AND sf.monthNum = MONTH(CURDATE()) WHERE ds.avgMonthlyDemand > 0) SELECT stockStatus, COUNT(*) AS productCount, AVG(currentStock) AS avgCurrentStock, AVG(recommendedMaxStock) AS avgRecommendedStock, SUM(CASE WHEN stockStatus IN ('Urgent Reorder', 'Reorder Soon') THEN recommendedMaxStock - currentStock ELSE 0 END) AS totalReorderNeeded FROM InventoryOptimization GROUP BY stockStatus ORDER BY FIELD(stockStatus, 'Urgent Reorder', 'Reorder Soon', 'Optimal', 'Overstocked');
